<html>
  <head>
    <!-- Materialize -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <!-- <model-viewer> -->
    <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
    <script nomodule src="https://unpkg.com/@google/model-viewer/dist/model-viewer-legacy.js"></script>
  </head>
  <body>
    <nav>
      <div class="nav-wrapper">
        <ul id="nav-mobile" class="left hide-on-med-and-down">
          <li><a href="/">model-hub</a></li>
          <li><a href="/about"><i class="material-icons">description</i></a></li>
        </ul>
        <!-- TODO A better way to display user email? -->
        <% if(email!=null) { %>
          <a href="/user" class="brand-logo center"><%= email %></a>
          <ul id="nav-mobile" class="right hide-on-med-and-down">
            <li><a href="/models/create"><i class="material-icons">file_upload</i></a></li>
            <li><a href="/user"><i class="material-icons">home</i></a></li>
            <li><a href="/logout"><i class="material-icons">exit_to_app</i></a></li>
          </ul>
        <% } %>
      </div>
    </nav>

    <div class="container">
      <div class="row">
        <h1><%= model.title %></h1>
        <% if(model.public && email!=null) { %>
          <a class="btn-floating btn-small waves-effect waves-light" id="starred"><i class="material-icons"><%= starred ? "star" : "star_border" %></i></a>
        <% } %>
        <% if(owner){ %>
          <div class="chips chips-initial chips-placeholder chips-autocomplete"></div>
        <% } else { %>
          <% for(i=0;i<model.tags.length;i++){ %>
            <div class="chip"><a href="/landing/<%= model.tags[i] %>"><%= model.tags[i] %></a></div>
          <% } %>
        <% } %>
        <p><%= model.desc %></p>
      </div>
      <!-- TODO Figure out how to best render versions -->
      <div class="row">
        <div class="col s12 m8 l7 xl5">
          <ul class="collapsible">
            <% for(let i=model.versions.length-1;i>=0; i--) { %>
              <li class="<%= i==model.versions.length-1 ? 'active': ''%>"">
                <div class="collapsible-header">
                  <span><%= model.versions[i].desc %></span>
                  <!-- TODO Use locality based date and time -->
                  <!-- TODO Get the date to right align -->
                  <span  class="secondary-content"><%= model.versions[i].date.toUTCString() %></span>
                  <!-- TODO Make clicking download not toggle card -->
                  <a href="data:application/octet-stream;base64,<%= model.versions[i].file.data.buffer.toString('base64') %>" download="<%= model.versions[i].file.name %>"><i class="material-icons">file_download</i></a>
                </div>
                <div class="collapsible-body">
                  <!-- TODO Make this size change work -->
                  <span><model-viewer width="500", height="500", src="data:application/octet-stream;base64,<%= model.versions[i].file.data.buffer.toString('base64') %>" auto-rotate camera-controls></model-viewer></span>
                </div>
              </li>
            <% } %>
          </ul>
        </div>
        <div class="col s4 l5 xl7">
          <div class="row">
            <table>
              <thead>
                <tr>
                  <th width="25%">Keys</th>
                  <th width="75%">Values</th>
                </tr>
              </thead>
              <tbody>
                <% for(const prop in model.spec) { %>
                  <tr>
                    <% if(owner) { %>
                      <td width="25%"><input name="<%= prop %>" type="text" value="<%= prop %>" onchange="specKeyUpdate(this);"></td>
                      <td width="75%"><input name="<%= prop %>" type="text" value="<%= model.spec[prop] %>" onchange="specValueUpdate(this);"></td>
                    <% } else { %>
                      <td width="25%"><%= prop %></td>
                      <td width="75%"><%= model.spec[prop] %></td>
                    <% } %>
                  </tr>
                <% } %>
              </tbody>
            </table>
            
          </div>
          <% if (owner) { %>
            <div class="row">
              <form class="z-depth-1" style="padding:10px;" action="/models/<%= model._id %>?_method=PUT" method="post" enctype="multipart/form-data">
                <div class="input-field">
                  <input type="text" id="title" name="title">
                  <label for="title">Title</label>
                </div>
                <div class="input-field">
                  <input type="text" id="update-desc" name="desc">
                  <label for="update-desc">Description</label>
                </div>
                <div class="file-field input-field">
                  <div class="btn">
                    <span>Poster</span>
                    <input type="file" name="poster">
                  </div>
                  <div class="file-path-wrapper">
                    <!-- TODO Validate it's jpeg -->
                    <input class="file-path validate" type="text" placeholder=".jpeg image">
                  </div>
                </div>
                <button class="btn waves-effect waves-light" type="submit" name="action">Update
                  <i class="material-icons right">edit</i>
                </button>
              </form>
            </div>
            <div class="row">
              <form class="z-depth-1" style="padding:10px;" action="/models/<%= model._id %>/version" method="post" enctype="multipart/form-data">
                <div class="input-field">
                  <input type="text" id="version-desc" name="desc" required>
                  <label for="version-desc">Description</label>
                </div>
                <div class="file-field input-field">
                  <div class="btn">
                    <span>File</span>
                    <input type="file" name="file">
                  </div>
                  <div class="file-path-wrapper">
                    <input class="file-path validate" type="text" placeholder=".glb model">
                  </div>
                </div>
                <button class="btn waves-effect waves-light" type="submit" name="action">New version
                  <i class="material-icons right">backup</i>
                </button>
              </form>
            </div>
            <div class="row">
              <form class="z-depth-1" style="padding:10px;" action="/models/<%= model._id %>/shareOwnership?_method=PUT" method="post">
                <div class="input-field">
                  <input id="own-email" type="email" class="validate" name="email">
                  <label for="own-email">Email</label>
                </div>
                  <button class="btn waves-effect waves-light" type="submit" name="action">Share ownership
                    <i class="material-icons right">call_split</i>
                  </button>
              </form>
            </div>
            <div class="row">
              <form class="z-depth-1" style="padding:10px;" action="/models/<%= model._id %>/share?_method=PUT" method="post">
                <div class="input-field">
                  <input id="share-email" type="email" class="validate" name="email">
                  <label for="share-email">Email</label>
                </div>
                  <button class="btn waves-effect waves-light" type="submit" name="action">Share
                    <i class="material-icons right">share</i>
                  </button>
              </form>
            </div>
            <div class="row">
              <a class="waves-effect waves-light btn modal-trigger" href="#disown-modal">Disown<i class="material-icons right">cancel</i></a>
            </div>
          <% } %>
        </div>
        
      </div>
    </div>
    
    <div id="disown-modal" class="modal">
      <div class="modal-content">
        <h4>How disowning works</h4>
        <p>
          Disowning != Deleting. <br>
          By disowning you decrease the number of owners of this model, it only deletes the model if the number of owners remaining is zero.
          The number of owners is set to 1 on creation and only increases when shared ownership is offered to another user and accepted.
          By disowning you are severing your connection to this model, you will loose ownership and can only regain it if another owners
          deems to share ownership with you again.
        </p>
      </div>
      <div class="modal-footer">
        <!-- <a href="#!" class="modal-close waves-effect waves-green btn-flat">Okay, go back</a> -->
        <a href="#!" class="modal-close waves-effect waves-green btn-flat">Okay, nevermind</a> 
        <form action="/models/<%= model._id %>/disown?_method=DELETE" method="post">
          <button class="btn waves-effect waves-light red" type="submit" name="action">Disown
            <i class="material-icons right">cancel</i>
          </button>
        </form>
      </div>
    </div>

    <!-- Materialize -->
    <script type="text/javascript" src="js/materialize.min.js"></script>
  </body>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      let elems = document.querySelectorAll('.collapsible');
      let instances = M.Collapsible.init(elems);
    });
    document.addEventListener('DOMContentLoaded', () => {
      let elems = document.querySelectorAll('.modal');
      let instances = M.Modal.init(elems);
    });
    document.addEventListener('DOMContentLoaded', function() {
      let elems = document.querySelectorAll('.chips');
      if (elems.length==0) return;
      
      const raw = "<%- model.tags %>".split(",");
      let initialTags = [...new Set(raw)].map(x=>{return{tag:x}});

      let instances = M.Chips.init(elems, {
        data: initialTags,
        placeholder:"Enter a tag",
        secondaryPlaceholder:"+Tag",
        autocompleteOptions: {
          data: autocompleteTags(),
          minLength: 2
        },
        onChipAdd: (data)=>{
          setTags(data[0].M_Chips.chipsData.map(x=>x.tag));
        },
        onChipDelete: (data)=>{
          setTags(data[0].M_Chips.chipsData.map(x=>x.tag));
        }
      });
    });
    
    // TODO This should be done using the html `onclick` property rather than like this
    const starred = document.getElementById("starred");
    if (starred != null) {
      starred.addEventListener("click",(doc) => {
        
        const star = document.getElementById("starred").children[0].innerHTML == "star";
        const icon = star ? "star_border" : "star";
        const route = star ? "unstar" : "star";
        console.log(star,icon,route);

        let request =  new XMLHttpRequest();
        console.log("/models/<%= model._id %>/"+route)
        request.open("put","/models/<%= model._id %>/"+route,true);
        request.onload = function() {
          if(this.status == 200) {
            document.getElementById("starred").children[0].innerHTML = icon;
          }
        }
        request.send();
      });
    }
    function autocompleteTags(tags = "<%- tags %>".split(",")) {
      let autocompleteTags = {};
      for(i=0;i<tags.length;i++) {
        autocompleteTags[tags[i]] = null;
      }
      //console.log(autocompleteTags)
      return autocompleteTags
    }
    function setTags(tags){
      console.log(tags)
      const route = "/models/<%- model._id %>/tags/"+tags.join(",");
      //console.log(route);

      let request =  new XMLHttpRequest();
      request.open("put",route,true);
      request.send();
    }
    function specKeyUpdate(input) {
      const route = "/models/<%- model._id %>/spec/key/"+input.name+","+input.value;
      console.log(route);

      let request =  new XMLHttpRequest();
      request.open("put",route,true);
      request.onload = function() {
        this.name = this.value;
      }
      request.send();
    }
    function specValueUpdate(input) {
      const route = "/models/<%- model._id %>/spec/value/"+input.name+","+input.value;
      console.log(route);

      let request =  new XMLHttpRequest();
      request.open("put",route,true);
      request.send();
    }
  </script>
</html>
<style>
  .chip a { color: inherit; } 
</style>