<html>
  <head>
    <!-- Materialize -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <!-- <model-viewer> -->
    <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
    <script nomodule src="https://unpkg.com/@google/model-viewer/dist/model-viewer-legacy.js"></script>

    <!-- masonry -->
    <script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>
  </head>
  <body>
    <nav>
      <div class="nav-wrapper">
        <ul id="nav-mobile" class="left hide-on-med-and-down">
          <li class="active"><a href="/">model-hub</a></li>
          <li><a href="/about"><i class="material-icons">description</i></a></li>
        </ul>
        <% if(email!=null) { %>
          <a href="/user" class="brand-logo center"><%= email %></a>
          <ul id="nav-mobile" class="right hide-on-med-and-down">
            <li><a href="/user"><i class="material-icons">home</i></a></li>
            <li><a href="/logout"><i class="material-icons">exit_to_app</i></a></li>
          </ul>
        <% } %>
      </div>
    </nav>
    <div class="container ">
      <h2 class="center-align">Landing page</h2>

      <% if(email==null) { %>
        <div class="row">
          <div id="register" class="col s6 offset-s3 z-depth-1">
            <form action="/register" method="post" class="center-align">
              <div class="input-field">
                <input type="email" id="email" name="email">
                <label for="email">Email</label>
              </div>
              <div class="input-field">
                <input type="password" id="password" name="password">
                <label for="password">Password</label>
              </div>
              <button class="btn waves-effect waves-light" type="submit" name="action">Register/Login
                <i class="material-icons right  ">lock_open</i>
              </button>
            </form>
          </div>
        </div>
      <% } %>

      <div class="row">
        <h2 class="center-align">Models</h2>
        <div class="row">
          <div class="input-field col s3">
            <input id="title" type="text" onchange="titleUpdate(this);">
            <label for="title">Title</label>
          </div>
          <div id="tags" class="col s9 chips chips-initial chips-placeholder chips-autocomplete"></div>
        </div>
        
        <div class="row">
          <div class="grid" id="model-grid">
            <% for(let i=0;i<models.length; i++) { %>
              <div class="grid-item">
                <a href="/models/<%= models[i]._id %>">
                  <div class="card <%= masonry ? '' : 'small' %>">
                    <div class="card-image">
                      <img src="data:image/jpeg;base64,<%= models[i].poster.data.buffer.toString('base64') %>">
                    </div>
                    <div class="card-content">
                      <span class="card-title"><%= models[i].title %></span>
                    </div>
                  </div>
                </a>
              </div>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </body>
  <style>
    a { color: inherit; } 
    img { object-fit: contain;  max-height: 300px; }
    .grid-item { width: 200px; }
    .card { margin: 10px }
  </style>
  <script>
    // Masonry setup
    let elem = document.querySelector('.grid');
    let msnry = new Masonry( elem, {
      itemSelector: '.grid-item'
    });
    // Title search update function
    function titleUpdate(title) {
      //console.log("title:",title.value);
      const tagChips = document.querySelectorAll("#tags div");

      const tags = Array.from(tagChips).map((chip)=>{
        return chip.innerText.split("\n")[0];
      });
      //console.log("tags:",tags);

      getModels(title.value,tags);
    }
    // Tag search setup
    document.addEventListener('DOMContentLoaded', function() {
      let elems = document.querySelectorAll('.chips');

      const raw = "<%- models.flatMap(x=>x.tags) %>".split(",");
      let initialTags = [...new Set(raw)].map(x=>{return{tag:x}});

      console.log(initialTags);
      let instances = M.Chips.init(elems, {
        data: initialTags,
        placeholder:"Enter a tag",
        secondaryPlaceholder:"+Tag",
        autocompleteOptions: {
          data: autocompleteTags(),
          minLength: 2
        },
        onChipAdd: (data)=>{
          //console.log(data[0].M_Chips.chipsData.map(x=>x.tag));
          const title = document.getElementById("title").value;
          getModels(title,data[0].M_Chips.chipsData.map(x=>x.tag));
        },
        onChipDelete: (data)=>{
          //console.log(data[0].M_Chips.chipsData.map(x=>x.tag));
          const title = document.getElementById("title").value;
          getModels(title,data[0].M_Chips.chipsData.map(x=>x.tag));
        }
      });
    });
    // From string creates tags autocomplete object
    function autocompleteTags(tags = "<%- tags %>".split(",")) {
      let autocompleteTags = {};
      for(i=0;i<tags.length;i++) {
        autocompleteTags[tags[i]] = null;
      }
      //console.log(autocompleteTags)
      return autocompleteTags
    }
    // TODO Most of the below functions feel very awkward, improve them.
    function getModels(title,tags) {
      const route = "/models/search/"+title+":"+tags.join(",");
      console.log(route);

      let request =  new XMLHttpRequest();
      request.open("get",route,true);
      request.onload = function() {
        const returnData = JSON.parse(request.responseText);
        //console.log(returnData);
        setModels(returnData);
      }
      request.send();
    }
    // Updates displayed model cards
    function setModels(models) {
      let modelGrid = document.getElementById("model-grid");
      modelGrid.innerHTML = "";
      for(i=0;i<models.length;i++) {
        modelGrid.appendChild(createCard(models[i]))
      }
      // Refresh masonry
      let msnry = new Masonry(document.querySelector('.grid'), {
        itemSelector: '.grid-item'
      });
    }
    function createCard(model) {
      let div = document.createElement("div");
      div.classList.add("grid-item");
      let a = document.createElement("a");
      a.setAttribute("href","/models/"+model._id);
      let card = document.createElement("div");
      card.classList.add("card");

      const temp2 = "<%- masonry ? '' : 'small' %>"
      //console.log("temp2:",temp2);
      if (temp2!='') card.classList.add(temp2);
      

      let cardImage = document.createElement("div");
      cardImage.classList.add("card-image");
      let img = document.createElement("img");
      img.setAttribute("src","data:image/jpeg;base64,"+model.poster.data.toString("base64"));
      cardImage.appendChild(img);
      card.appendChild(cardImage)

      let cardContent = document.createElement("div");
      cardContent.classList.add("card-content");
      let cardTitle = document.createElement("span");
      cardTitle.classList.add("card-title");
      cardTitle.innerHTML = model.title;
      cardContent.appendChild(cardTitle);
      card.appendChild(cardContent)
      
      a.appendChild(card);
      div.appendChild(a);
      return div;
    }
  </script>
</html>